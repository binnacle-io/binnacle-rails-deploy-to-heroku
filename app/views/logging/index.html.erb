<div class="page-header">
  <h1>Log to Signal</h1>
</div>

<p>
  Binnacle can log incoming or outgoing HTTP requests from your application.
  You can also use the Binnacle Logger directly to send signals to Binnacle. The Binnacle Logger
  conforms to the <a href="http://ruby-doc.org/stdlib-2.3.0/libdoc/logger/rdoc/Logger.html" target="blank">Ruby Logger class</a>.
</p>

<div class="panel panel-primary">
  <div class="panel-heading">
    <h3 class="panel-title">Tail the Log</h3>
  </div>
  <div class="panel-body">
    <p>
    You can open the log tail view for the channel (<strong><%= ENV['BINNACLE_APP_LOG_CHANNEL'] %></strong>) used for general logging or view the aggregated logs for the application (<strong><%= ENV['BINNACLE_APP'] %></strong>) to see the signals generated by the logging statements below.
    </p>
    <% if application_log %>
      <%= link_to(application_log, class: 'btn btn-primary', target: 'blank') do %>
        <i class="fa fa-external-link"></i> Open App Log Viewer
      <% end %>
    <% end %>

    <% if logging_channel_log %>
      <%= link_to(logging_channel_log, class: 'btn btn-primary', target: 'blank') do %>
        <i class="fa fa-external-link"></i> Open Channel Log Viewer
      <% end %>
    <% end %>
  </div>
</div>

<div class="bs-callout bs-callout-info">
  <h4>Basic Logging</h4>
  <p>The binnacle logger can be used just like any other Ruby Logger. You can access it via the class method logger in the Binnacle module:</p>
  <div class="zero-clipboard"><%= button_to "Try it!", logging_info_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %></div>
  <figure class="highlight">
    <pre>
      <code class="language-ruby" data-lang="ruby">Binnacle.logger.info("This is an info message")</code>
    </pre>
  </figure>
</div>

<div class="bs-callout bs-callout-info">
  <h4>Log Levels</h4>
  <p>Set the logger's level with <code class="language-ruby" data-lang="ruby">Binnacle.logger.level = Logger::DEBUG</code>:</p>
  <div class="zero-clipboard"><%= button_to "Try it!", logging_debug_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %></div>
  <figure class="highlight">
    <pre>
      <code class="language-ruby" data-lang="ruby">Binnacle.logger.level = Logger::DEBUG
Binnacle.logger.debug("This is an debug message")</code>
    </pre>
  </figure>
</div>

<div class="bs-callout bs-callout-info">
  <h4>Using Progname</h4>
  <p>Use the progname attribute to change the name of the event being logged.</p>
  <p>By default Binnacle uses <code>log</code> as the event name:</p>
  <p>Passing a String will override the event name.</p>
  <div class="zero-clipboard"><%= button_to "Try it!", logging_with_procname_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %></div>
  <figure class="highlight">
    <pre>
      <code class="language-ruby" data-lang="ruby">Binnacle.logger.level = Logger::ERROR
Binnacle.logger.error('comm_error') { "Can't reach the service endpoint!" }</code>
    </pre>
  </figure>
</div>

<div class="bs-callout bs-callout-info">
  <h4>Using Progname Hash</h4>
  <p>Passing a Hash as the progname parameter you can then specify
   a Binnacle's signal remaining parameters (session_id, event_name, client_id, tags):</p>
  <div class="zero-clipboard"><%= button_to "Try it!", logging_with_procname_hash_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %></div>
  <figure class="highlight">
    <pre>
      <code class="language-ruby" data-lang="ruby">Binnacle.logger.info(channel_id: '<%= ENV['BINNACLE_APP_LOG_CHANNEL'] %>', session_id: '8675309', event_name: 'failed_transfer') {
  'transfer failed, bad RTN'
}</code>
    </pre>
  </figure>
</div>

<div class="bs-callout bs-callout-info">
  <h4>Tagged Logging</h4>
  <p>Tagged Logging can be used to apply a tag to a set of logging statements:</p>
  <div class="zero-clipboard"><%= button_to "Try it!", logging_tagged_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %></div>
  <figure class="highlight">
    <pre>
      <code class="language-ruby" data-lang="ruby">Binnacle.logger.tagged("cart") do
  Binnacle.logger.info "Adding Item 123"
  Binnacle.logger.info "Adding Item 234"
end</code>
    </pre>
  </figure>
</div>

<div class="bs-callout bs-callout-info">
  <h4>Multiple Tags</h4>
  <p>You can pass multiple tags to a Tagged Logging statement:</p>
  <div class="zero-clipboard"><%= button_to "Try it!", logging_multi_tagged_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %></div>
  <figure class="highlight">
    <pre>
      <code class="language-ruby" data-lang="ruby">Binnacle.logger.tagged("account", "payments") do
  Binnacle.logger.info 'Added new credit card of type VISA'
  Binnacle.logger.info 'Remove Paypal account'
end</code>
    </pre>
  </figure>
</div>
