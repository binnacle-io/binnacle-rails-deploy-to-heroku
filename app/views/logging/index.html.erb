<section class="intro">
  <div class="container">
    <div class="row text-center">
      <div class="col-md-8 col-md-offset-2 col-xs-8 col-xs-offset-2">
        <%= image_tag('log-signal.svg', class: "img-responsive") %>
        <h1>Log to Signal</h1>
      </div>
    </div> <!-- /row -->
  </div> <!-- /container -->
</section> <!-- /intro -->
<section class="content">
  <div class="container">
    <div class="row">
      <div class="col-md-10 col-md-offset-1">
        <p>Binnacle can log incoming or outgoing HTTP requests from your application. You can also use the Binnacle Logger directly to send signals to Binnacle. The Binnacle Logger conforms to the <a href="http://ruby-doc.org/stdlib-2.3.0/libdoc/logger/rdoc/Logger.html" target="blank">Ruby Logger class</a>.</p>
        <div class="panel panel-primary">
          <div class="panel-heading">
            <h3 class="panel-title">Tail the Log</h3>
          </div>
          <div class="panel-body">
            <p>You can open the log tail view for the channel (<strong><%= ENV['BINNACLE_APP_LOG_CHANNEL'] %></strong>) used for general logging or view the aggregated logs for the application (<strong><%= ENV['BINNACLE_APP'] %></strong>) to see the signals generated by the logging statements below.</p>
            <% if application_log %>
              <%= link_to(application_log, class: 'btn btn-primary', target: 'blank') do %>
                <i class="fa fa-external-link"></i> Open App Log Viewer
              <% end %>
            <% end %>

            <% if logging_channel_log %>
              <%= link_to(logging_channel_log, class: 'btn btn-primary', target: 'blank') do %>
                <i class="fa fa-external-link"></i> Open Channel Log Viewer
              <% end %>
            <% end %>
          </div> <!-- /panel-body -->
        </div> <!-- /panel -->
        <h2>Basic Logging</h2>
        <p>The binnacle logger can be used just like any other Ruby Logger. You can access it via the class method logger in the Binnacle module:</p>
        <figure class="highlight">
          <div class="zero-clipboard">
            <%= button_to "Try it!", logging_info_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %>
          </div>
<pre class="prettyprint">Binnacle.logger.info("This is an info message")</pre>
        </figure>
        <h2>Log Levels</h2>
        <p>Set the logger's level with <code class="language-ruby" data-lang="ruby">Binnacle.logger.level = Logger::DEBUG</code>:</p>
        <figure class="highlight">
          <div class="zero-clipboard">
            <%= button_to "Try it!", logging_debug_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %>
          </div>
<pre class="prettyprint">Binnacle.logger.level = Logger::DEBUG
Binnacle.logger.debug("This is an debug message")</pre>
        </figure>
        <h2>Using Progname</h2>
        <p>Use the progname attribute to change the name of the event being logged.</p>
        <p>By default Binnacle uses <code>log</code> as the event name:</p>
        <p>Passing a String will override the event name.</p>
        <figure class="highlight">
          <div class="zero-clipboard">
            <%= button_to "Try it!", logging_with_procname_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %>
          </div>
<pre class="prettyprint">Binnacle.logger.level = Logger::ERROR
Binnacle.logger.error('comm_error') { "Can't reach the service endpoint!" }</pre>
        </figure>
        <h2>Using Progname Hash</h2>
        <p>Passing a Hash as the progname parameter you can then specify a Binnacle's signal remaining parameters (session_id, event_name, client_id, tags):</p>
        <figure class="highlight">
          <div class="zero-clipboard">
            <%= button_to "Try it!", logging_with_procname_hash_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %>
          </div>
<pre class="prettyprint">Binnacle.logger.info(channel_id: '<%= ENV['BINNACLE_APP_LOG_CHANNEL'] %>', session_id: '8675309', event_name: 'failed_transfer') {
  'transfer failed, bad RTN'
}</pre>
        </figure>
        <h2>Tagged Logging</h2>
        <p>Tagged Logging can be used to apply a tag to a set of logging statements:</p>
        <figure class="highlight">
          <div class="zero-clipboard">
            <%= button_to "Try it!", logging_tagged_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %>
          </div>
<pre class="prettyprint">Binnacle.logger.tagged("cart") do
  Binnacle.logger.info "Adding Item 123"
  Binnacle.logger.info "Adding Item 234"
end</pre>
        </figure>
        <h2>Multiple Tags</h2>
        <p>You can pass multiple tags to a Tagged Logging statement:</p>
        <figure class="highlight">
          <div class="zero-clipboard">
            <%= button_to "Try it!", logging_multi_tagged_path, remote: true, class: "btn-clipboard", data: { container: "body", toggle: "popover", trigger: "hover", placement:"left", title: "Try it!", content: "Trigger the logging statements and watch them live on binnacle.io"} %>
          </div>
<pre class="prettyprint">Binnacle.logger.tagged("account", "payments") do
  Binnacle.logger.info 'Added new credit card of type VISA'
  Binnacle.logger.info 'Remove Paypal account'
end</pre>
        </figure>
      </div>
    </div> <!-- /row -->
  </div> <!-- /container -->
</section> <!-- /content -->
